{"summary": "the text has been updated to include links to additional resources that demonstrate package usage. the authors feel that these changes have improved the manuscript. both datasets must be enumerated in tabular format. the line list requires one column with a unique identifier for each pair of contacts. the contact list needs two columns for the source and destination of each pair of contacts. 'data.frame': 162 obs. of 15 variables: ## $ infector: chr \"d1fafd\" \"cac51e\" \"f5c3d8\" \"0f58c4\"... ## $ case_id: chr \"53371b\" \"f5c3d8\" \"0f58c4\"... # example middle east respiratory syndrome data # line list str(mers_korea_2015$linelist) ## $ dt_onset : Date, format: \"2015-05-11\" \"2015-05-18\" ## $ week_report : Factor w/ 5 levels \"2015_21\",\"2015_22\" ## $ dt_start_exp : Date, format: \"2015-04-18\" \"2015-05-15\" a stable release is available for Windows, Mac and Linux operating systems via the CRAN repository. the latest development version of the package is available through the RECON Github organization. s package for data install.packages(outbreaks) # load the outbreaks package library(outbreaks) # construct an epicontacts object x - make_epicontacts(linelist=mers_korea_2015[[1]], contacts = mers_korea_2015[[2]], directed=TRUE) # print the object x ## ## // class: epicontacts ## // 162 cases in linelist; 98 contacts; directed ## Factor w/ 5 levels \"2015_21\",\"2015_22\" ## $ dt_start_exp : Date, format: \"2015-04-18\" \"2015-05-15\" ## $ outcome : Factor w/ 2 levels \"Alive\",\"Dead\": 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1. median Mean 3rd Qu. Max. ## 0.00 0.00 1.01 0.00 38.00 ## ## // in and out degree summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.000 1.000 1.000 2.021 1.000 39.000 ## ## // attributes in linelist: ## age age_class sex place_infect reporting_ctry loc_hosp dt_onset dt_report week_report vis_epicontacts() function explicitly calls visNetwork to make an interactive plot of the contact network. graph3D() function generates a three-dimensional network plot. epicontacts leverages a customized subset method to filter line lists or contacts based on values from nodes, edges or both. the subtracted value of the contacts would approximate the serial interval for the outbreak 19. the default behavior is to print the associated line list attribute for each pair of contacts. the function includes a further parameter to pass an arbitrary function to process the specified attributes. the package does not include built-in data, as exemplary contact and line list datasets are available in the outbreaks package 16. the example that follows will use the mers_korea_2015 dataset from outbreaks. Factor w/ 2 levels \"China\",\"South Korea\": 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2. ## $ loc_hosp : Factor w/ 13 levels \"365 Ye epicontacts implements two interactive network visualisation packages: visNetwork and threejs 17, 18. they provide R interfaces to the vis.js and three.js JavaScript libraries respectively. their functionality is incorporated in the generic plot() method. visNetwork interactivity is accessible via vis_epicontacts() and threejs through graph3D(). each function has a series of arguments that can also be passed through plot(). vis_epicontacts() includes a specification for \u201cnode_shape\u201d by a line list attribute. te = list(\"exposure\" = \"Emergency room\") # subset for males who survived and were exposed in emergency room subset(x, node_attribute = list(\"sex\" = \"M\", \"outcome\" = \"Alive\"), edge_attribute = list(\"exposure\" = \"Emergency room\")) thin(x, \"contacts\") thin(x, \"linelist\" future development could involve performance optimization for visualising large networks, as generating these interactive plots is resource intensive. however, by rotating or hovering over an epicontacts visualisation, a user may better understand the data."}