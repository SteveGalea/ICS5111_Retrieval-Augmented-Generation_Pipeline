{"summary": "automated disease surveillance systems have been in existence for over 10 years. most of these systems analyze data by syndrome and search for disease outbreaks. a syndrome in this context is defined as a group of diseases related in some fashion, such as respiratory diseases. a dynamic query tool exploits combinations of data elements available to disease surveillance systems. most automated disease surveillance systems have a fixed number of predefined syndromes. these applications severely limit the surveillance system value for diseases that fall outside of its broad syndrome categories. the tool\u2019s interface will help generate queries that can process any kind of data regardless of its source. the user will be able to formulate ad-hoc queries across assorted data sources without the need to understand the underlying data models and the query languages associated with different systems. AQT will provide an interface for disease surveillance systems to store, retrieve, and share queries. a case definition is a set of symptoms, signs, etc., by which public health professionals define those patients considered to be directly a part of the disease outbreak. the interface has to provide a list of data elements pertaining to the chosen data source. for example, the data might represent different geographic regions from one data source to the other. the interface has to provide a list of data elements pertaining to the chosen data source. the syntax is simple and close to the \u201cwhere\u201d clause of a Structure Query Language (SQL) statement. a query consists of one or more simple expressions joined by \u201cAND\u201d and/or \u201cOR\u201d negated by \u201cNOT\u201d and grouped by parentheses. a simple expression is enclosed within square brackets ([]) and defined by a variable, a logical operator, and a value. the interface will provide a natural flow to help the users create an expression as if they are typing it. the user can interject expressions in the middle of a query, remove parts of the query, or undo the last change made to the query. AQT helps users quickly identify limits for variables with large sets of values. if the investigators are interested in data from certain zip codes in a state, they can reduce the options by typing the first two digits of the zip code and thereby filtering the list. if the query is valid, the screen provides an area to enter a unique name for the query. the AQT passes the name and query expression to the surveillance system. it is the surveillance system\u2019s responsibility to confirm that the query\u2019s name is unique. the back end can be implemented in a variety of popular technologies such as.NET, Java Servlet, or any other server technology as long as it can communicate via an http protocol. the tool has to provide the interfaces that supply values for the different parts of the screen, and the functionality to parse the final query text and run it against the underlying database. the user can filter the data by picking the data source from a dropdown list, start and end date. the next area, the query section, contains the query expression. the user can either directly type the query expression or use the tool to generate the query expression. the interface is designed to distinguish valid data elements for each data source. the list box is divided into three major areas: the geography system The medical grouping system Others such as age, sex, saved and shared queries. a main objective of the AQT is to provide an interface that caters both novice and experienced users. an investigator is searching for reported fever cases within a specified zip code. the final query may look like the expression below: [ZIPCODE=\u201c21043\u201d] AND [SYNDROME=\u201cFEVER\u201d] If the investigators want to narrow the search into a certain age group they can type or use the tool to add AND [AGE = \u201c0-4\u201d] to the above expression. a list of core data elements is provided in a list box. the user can select a data element based on the type of the data element. a list of valid operators for long text fields is placed in another list box. the tool provides an intermediate step for filtering these options into a more manageable list. for example, if the investigators are interested in data from certain zip codes in a state, they can reduce the options by typing the first two digits of the zip code and thereby filtering the list. the AQT facilitates saving public queries by providing an interface similar to saving private queries. the surveillance system should implement the inner workings of the permanent storage and retrieval of public queries. asynchronous loading does not interfere with normal page loading. the AQT uses AJAX calls to obtain required data for populating the different list boxes on the screen. asynchronous loading does not interfere with normal page loading. implementation ESSENCE was one of the early adaptors of AQT. the original capability did not allow for querying of data beyond the fundamental chief complaints level. the AQT also allows users to develop queries that contain combinations of chief complaints, syndromes, and sub-syndromes into one query. the query can also contain combinations of different geographies. the AQT is a self-contained tool that can be plugged into most web-based disease surveillance systems with relative ease. the interface supports saving queries for future use and sharing queries with others in the user community."}