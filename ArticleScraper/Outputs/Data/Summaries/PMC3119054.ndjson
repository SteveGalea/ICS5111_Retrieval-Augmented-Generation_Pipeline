{"summary": "some approaches have been developed to retrieve data automatically from one or multiple data sources. buttler and Critchlow propose a meta-data description language to automatically generate wrappers that can extract the appropriate data from each source. some approaches for remote data retrieval require researchers to remain online. mobile agents can automatically suspend executions on one host and migrate to another to resume their computations without tedious and slow network communication. agents are sent to some nodes/devices with rich resources for doing some tasks which have high requirements of resources, and then bring results back. the proposed multi-agent system is fully implemented using Java. this architecture is regarded as a three-layer model, including: (1) resources layer, (2) agent environment layer, and (3) applications layer. the agent environment layer provides a bunch of low-level functional modules. the proposed multi-agent system has two migration modes: synchronous and asynchronous migration. if the agent migration service finds the destination node is unreachable, it will send an error message to its administrator and let him/her determine its next step. the agent migration service is responsible for sending/receiving an agent to/from another host. migration strategy and security authentication of agent migration are presented as follows. a flowchart of agent asynchronous migration is shown in Figure 2. security authentication of agent migration must be done locally and not involve an external directory service. the trustable node examination is based on JVM, which creates protection domain for executing program and restricts the privilege of the remote program. the security authentication service also maintains a user authentication table, which is used to authenticate mobile agents that migrate from other hosts. agent environment layer provides low-level functional modules which can help agents fully use the resources. the agent environment layer provides a set of general-purpose runtime services. these services alleviate agents from low-level operations and allow agents to be lightweight by separating them from routine work. the agent migration service is responsible for sending/receiving an agent to/from another host. it serializes both agent code and execution state into persistent storage. the persistency service offers fault tolerance by duplicating and storing agent copies before starting critical operations. the security authentication of agent migration is based on java virtual machine (JVM) an application developer creates and signs message abstract where a signature is encrypted digital data. if two abstracts match, there is no change in the migrating agent. agent migration service checks migration conditions in the source node. the migration is successful, and the original agent will be deleted in the source node. security authentication of agent migration must be done locally and not involve an external directory service. the trustable node examination is based on JVM, which creates protection domain for executing program and restricts the privilege of the remote program. the security authentication service also maintains a user authentication table, which is used to authenticate mobile agents that migrate from other hosts. the agent needs to capture sequence data under \u201cORIGIN\u201d tag, which stands for the start of a genome sequence. the agent is required to declare a HTTP component to locate the data source, then capture and store the information. if the process is verified as a successful case, the information captured will be returned to client terminals. public void preDeliverAgent (Agent agent, String desAddress) String agentId = agent.getAgentID(); // obtain the ID of the agent; String address = desAddress; // the address of the destination host; String rmiiiopAddress = \u201c//\u201d+address+\u201c/preReceiveAgent\u201d; // look for preReceiveAgent(); boolean migrate = receiver.preReceiveAgent (host using the approach proposed in Ref. [30] and the agent only needs to return the analysis results. this paper proposes an agent migration approach to fill in the gap that existing approaches have not addressed. the approach can also overcome the resource limitation of mobile terminals and release mobile users from keeping online persistently. the mobile agent is required to obtain the start and end positions of a genome sequence of S protein. the agent needs to capture sequence data under \u201cORIGIN\u201d tag. if the process is verified as a successful case, the information will be returned to client terminals. public void preDeliverAgent (Agent agent, String desAddress) String agentId = agent.getAgentID(); // obtain the ID of the agent; String address = desAddress; // the address of the destination host; String rmiiiopAddress = \u201c//\u201d+address+\u201c/preReceiveAgent\u201d; // look for preReceiveAgent(); // invoke preReceiveAgent(); // invoke preReceive a remote data retrieval was used to illustrate the feasibility of the proposed approach. the agent migration approach can also be applied to retrieving non-data web resources, for example, sending mobile agents to bioinformatics web servers."}