{"summary": "epidemic curves represent the number of new cases per time unit based on the date or time of symptom onset. epicurves provide a simple, visual outline of epidemic dynamics. they can be used for assessing the growth or decline of an outbreak. incidence is an R package developed as part of the toolbox for epidemics analysis of the R Epidemics Consortium (RECON) the aim of this package is to provide simple, user-friendly and robust tools for computing, manipulating, and plotting epidemic curves. the general workflow revolves around a single type of object, formalised as the S3 class incidence. incidence() also accepts a groups argument which can be used to obtain stratified incidence. the basic elements of the incidence object can be obtained by the accessors get_counts(), get_dates(), and get_interval(). the incidence package is thoroughly tested via automatic tests implemented using testthat. we use the continuous integration services travis.ci and appveyor to ensure that new versions of the code maintain all existing functionalities. the function estimate_peak() uses multinomial bootstrapping to estimate the peak. this function returns the estimated peak with a confidence interval along with boostrap estimates. the function fit_optim_split() can be used to detect the optimal turning point of the epidemic and fit two separate models on either side of the peak. the incidence object is obtained by running the function incidence() specifying two inputs: a vector of dates and an interval specification. the dates can be any type of input representing dates including Date and POSIXct objects, as well as numeric and integer values. the interval can also be defined as a text string of either \"week\", \"month\", \"quarter\" or \"year\" x[i, j] where x is the incidence object, and i and j are subsets of dates and groups. the function cumulate() will turn incidence data into cumulative incidence. incidence objects can also be exported to either a matrix using get_counts() or a data.frame using as.data.frame(). model is of the form log( y) = r t + b where y is the incidence, r is the growth rate, t is the number of days since the start of the outbreak, and b is the intercept. this approach estimates a growth rate r (the slope of the regression), which can in turn be used for estimating the doubling or halving time of the epidemic. use cases Two worked examples are used to demonstrate the functionality and flexibility of the incidence package. the first example illustrates how to compute and manipulate stratified weekly incidence directly from a line-list. the second example shows how to import pre-computed daily incidence. ## $ date_of_hospitalisation : Date, format: \"2014-04-17\" \"2014-04-20\" NA. ## $ gender : Factor w/ 2 levels \"f\",\"m\": 1 2 1 1 1 1 1 2. ## $ hospital : Factor w/ 5 levels \"Connaught Hospital\" the $timespan component stores the length of time (in days) for which incidence is computed. the generic plot() method for incidence objects calls the specific function plot.incidence(). an extra component of $isoweek is added to the incidence object i.7.group to store those weeks in the ISO 8601 standard week format \u201cyyyy-Www\u201d. the x-axis tick labels of the weekly incidence plot are in the ISO week format \u201cyyyy-ww\u201d rather than in the date format \u201cyyyy-mm-dd\u201d. we have highlighted each case using show_cases = TRUE. the missing hospital name is treated as a separate group. this argument can be set to FALSE to not include data with missing groups in the object. plots of ZVD in Colombia are shown in Figure 4. we can see that the epidemic occurred earlier in San Andres Island than in Girardot. we fit two log-linear regression models around the peak. fit() function requires us to know what date should be used to split the epicurve in two phases. without any knowledge on the splitting date, we can turn to the fit_optim_split() function to look for the optimal splitting date. we then fit two log-linear regression models before and after the optimal splitting date. the $fit component suggests that the optimal splitting date is 2015-11-15. the $fit component is an incidence_fit_list containing two incidence_fit objects named \u2018before\u2019 and \u2018after\u2019. each contain the information extracted from the fitted log-linear regression models. the dataset contains 5,829 cases of 9 variables. the date of symptom onset ( $date_of_onset) and the name of the hospital ( $hospital) are used for computing the weekly epicurves stratified by hospitals. the incidence object i.7.group is a list with class of incidence for which several generic methods are implemented. the generic plot() method for incidence objects calls the specific function plot.incidence(), which makes an incidence barplot using the ggplot2 package. the x-axis tick labels of the weekly incidence plot are in the ISO week format \u201cyyyy-Www\u201d rather than in the date format \u201cyyyy-mm-dd. the first 18 weeks of simulated outbreak of EVD were stratified by hospitals. the missing hospital name is treated as a separate group, resulting from the default of the argument na_as_group = TRUE in the incidence() function. the datasets zika_girardot_2015 and zika_sanandres_2015 used in the second example are also from the outbreaks package. the datasets describe the daily incidence of Zika virus disease (ZVD) in, respectively, Girardot and San Andres Island, Colombia from September 2015 to January 2016. ot_2015, zika_sanandres_2015, by = \"date\", all = TRUE\" # replace NA with 0 dat2[is.na(dat2)] - 0 # convert pre-computed incidence in data.frame into incidence object # grouped by locations i.group - as.incidence(x = dat2[, 2:3], dates = dat2$date) # pool incidence across two locations i.pooled - pool( the $split component suggests that the optimal splitting date is 2015-11-15. the $fit component is an incidence_fit_list containing two incidence_fit objects named \u2018before\u2019 and \u2018after\u2019. the predictions and their 95% CIs from the two incidence_fit objects can be added to the existing incidence plot of i.pooled using the piping-friendly function add_incidence_fit(). based on visual comparison of models and data, these two log-linear regression models provide a decent approximation for the actual dynamics of the epidemic. the incidence package is ideal for rapid generation of reports and estimates in outbreak response situations where time is a critical factor. ebola_sim_clean: https://github.com/reconhub/outbreaks/blob/master/data/zika_ girardot_2015.RData zika_girardot_2015: https://github.com/reconhub/outbreaks/blob/master/data/zika_ girardot_2015. zika_sanandres_2015.RData."}